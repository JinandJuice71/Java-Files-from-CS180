
import java.io.*;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * An MP3 Client to request .mp3 files from a server and receive them over the
 * socket connection.
 */
public class MP3Client {

    public static void main(String[] args) {
        String host = "localhost";
        int port = 55555;
        try {
            Socket socket = new Socket(host, port);
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            System.out.println("Connected to server successfully.");

            Scanner scanner = new Scanner(System.in);
            int choice;
            SongRequest sr;
            do {
                System.out.println("Choose from the following: ");
                System.out.println("\t1. List of available songs.");
                System.out.println("\t2. download a song.");
                System.out.println("\t3. Exit");
                System.out.println("Enter your choice:");
                choice = scanner.nextInt();
                switch (choice) {
                    case 1: // send the server a SongRequest with downloadRequest set to false.
                        sr = new SongRequest(false);
                        outputStream.writeObject(sr);

                        /*InputStream is = socket.getInputStream();
                        InputStreamReader isr = new InputStreamReader(is);
                        BufferedReader br = new BufferedReader(isr);*/
                        String record = null;
                        System.out.println("Start recieving records.");
                        while (true) {
                            try {
                                record = (String) ois.readObject();
                            } catch (ClassNotFoundException ex) {
                                System.out.println("Error in converting string");
                                System.out.println(ex);
                            }
                            if (record == null) {
                                System.out.println("Record is null.");
                                break;
                            }
                            System.out.println(record);
                        }
                        break;
                    case 2:
                        System.out.println("Enter the from song name: ");
                        String songName = scanner.next();
                        System.out.println("Enter the from artist name: ");
                        String artistName = scanner.next();
                        sr = new SongRequest(true, songName, artistName);
                        outputStream.writeObject(sr);
                        outputStream.close();
                        ResponseListener rl = new ResponseListener(socket);
                        Thread t = new Thread(rl);
                        t.run();
                        //Wait for this thread to finish, then close the socket and continue with the client.
                        break;
                    case 3:
                        scanner.close();
                        socket.close();
                        break;
                    default:
                        System.out.println("Entered an invalid choice");
                }
            } while (choice != 3);

        } catch (IOException ex) {
            Logger.getLogger(MP3Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

/**
 * This class implements Runnable, and will contain the logic for listening for
 * server responses. The threads you create in MP3Server will be constructed
 * using instances of this class.
 */
final class ResponseListener implements Runnable {

    private ObjectInputStream ois;

    public ResponseListener(Socket clientSocket) {
        try {
            ois = new ObjectInputStream(clientSocket.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(ResponseListener.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Listens for a response from the server.
     * <p>
     * Continuously tries to read a SongHeaderMessage. Gets the artist name,
     * song name, and file size from that header, and if the file size is not
     * -1, that means the file exists. If the file does exist, the method then
     * subsequently waits for a series of SongDataMessages, takes the byte data
     * from those data messages and writes it into a properly named file.
     */
    public void run() {
        try {
            SongHeaderMessage songHeader = (SongHeaderMessage) this.ois.readObject();

            if (songHeader.isSongHeader()) {
                String fileName = songHeader.getArtistName() + " - " + songHeader.getSongName() + ".mp3";
                byte[] buffer = new byte[songHeader.getFileSize()];
                int offset = 0;
                while ((buffer.length - offset) > 0) {
                    this.ois.read(buffer, offset, buffer.length - offset);
                    offset += 1000; //get file in cunks of 1000 bytes
                }
                this.writeByteArrayToFile(buffer, fileName);
            } else {
                String msg;
                do {
                    msg = this.ois.readLine();
                    if (msg == null) {
                        break;
                    }
                    System.out.println(msg);
                } while (true);

            }

        } catch (IOException ex) {
            Logger.getLogger(ResponseListener.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ResponseListener.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Writes the given array of bytes to a file whose name is given by the
     * fileName argument.
     *
     * @param songBytes the byte array to be written
     * @param fileName the name of the file to which the bytes will be written
     */
    private void writeByteArrayToFile(byte[] songBytes, String fileName) {
        File song = new File("savedSongs\\" + fileName);
        try {
            FileOutputStream fos = new FileOutputStream(song);
            fos.write(songBytes);
            fos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ResponseListener.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ResponseListener.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
